const express=require('express');const http2=require('http2');const app=express();const port=process.env.PORT||3000;app.use(express.json());const sessions={};app.post('/',(req,res)=>{console.log('=== REQUEST START ===');const{url}=req.body;console.log('URL received:',url);res.status(200).send('ok');if(url){const u=new URL(url);const key=`${u.protocol}//${u.host}`;console.log('Session key:',key);console.log('Sessions object keys:',Object.keys(sessions));console.log('Session exists:',!!sessions[key]);if(sessions[key]){console.log('Session destroyed:',sessions[key].destroyed);console.log('Session closed:',sessions[key].closed);}const fire=(session)=>{console.log('FIRE FUNCTION CALLED');console.log('Session passed to fire:',!!session);for(let i=0;i<76;i++){console.log('Creating stream',i+1);const stream=session.request({':method':'POST',':path':u.pathname,'content-type':'application/json'});stream.write(JSON.stringify({}));stream.end();stream.on('error',(err)=>{console.log('Stream error:',err.message);});}console.log('All 76 streams created');};if(!sessions[key]||sessions[key].destroyed||sessions[key].closed){console.log('Creating new session');const session=http2.connect(u.origin);console.log('Session created, waiting for connect');session.on('error',(err)=>{console.log('Session error:',err.message);delete sessions[key];});session.once('connect',()=>{console.log('Session connected, storing and firing');sessions[key]=session;fire(session);});sessions[key]=session;console.log('New session stored');}else{console.log('Using existing session');fire(sessions[key]);}}console.log('=== REQUEST END ===');});app.get('/',(req,res)=>{res.status(200).send('ok');});app.listen(port,()=>{console.log(`Service running on port ${port}`);});
